name: Build and Release Plugin

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README*'
      - 'doc/**'
      - 'design/**'
      - 'dev/**'

permissions:
  contents: write

env:
  rack-sdk-version: latest
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

jobs:
  build-linux-windows:
    name: Build on ${{ matrix.platform }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/qno/rack-plugin-toolchain-win-linux
      options: --user root
    strategy:
      matrix:
        platform: [win-x64, lin-x64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
          submodules: recursive

      - name: Build plugin
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          make plugin-build-${{ matrix.platform }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build/**
          name: "${{ matrix.platform }}"
          overwrite: true

  build-mac:
    name: Build on macOS ${{ matrix.platform }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
          submodules: recursive

      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip "https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-x64%2barm64.zip"
          unzip Rack-SDK.zip

      - name: Build plugin
        run: |
          CROSS_COMPILE_TARGET_x64=x86_64-apple-darwin
          CROSS_COMPILE_TARGET_arm64=arm64-apple-darwin
          export RACK_DIR=$HOME/Rack-SDK
          export CROSS_COMPILE=$CROSS_COMPILE_TARGET_${{ matrix.platform }}
          make dep
          make dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: "mac-${{ matrix.platform }}"
          overwrite: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux-windows, build-mac]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Get Current Version
        id: get_current_version
        run: |
          VERSION=$(jq -r '.version' plugin.json)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Previous Version
        id: get_previous_version
        run: |
          PREV_VERSION=$(git show HEAD^:plugin.json 2>/dev/null | jq -r '.version' || echo "none")
          echo "PREV_VERSION=$PREV_VERSION" >> $GITHUB_OUTPUT

      - name: Check for Version Bump
        id: version_check
        run: |
          if [ "${{ steps.get_current_version.outputs.VERSION }}" != "${{ steps.get_previous_version.outputs.PREV_VERSION }}" ]; then
            echo "VERSION_BUMP=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_BUMP=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and Push Tag
        if: steps.version_check.outputs.VERSION_BUMP == 'true'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "v${{ steps.get_current_version.outputs.VERSION }}" -m "Release version v${{ steps.get_current_version.outputs.VERSION }}"
          git remote set-url origin https://${GITHUB_ACTOR}:${PAT_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin "v${{ steps.get_current_version.outputs.VERSION }}"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Create Release
        if: steps.version_check.outputs.VERSION_BUMP == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_current_version.outputs.VERSION }}"
          name: " v${{ steps.get_current_version.outputs.VERSION }}"
          body: "Release of version v${{ steps.get_current_version.outputs.VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        if: steps.version_check.outputs.VERSION_BUMP == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _artifacts/**/*.*
          tag: "v${{ steps.get_current_version.outputs.VERSION }}"
          file_glob: true

      - name: Create or Update Nightly Release
        if: steps.version_check.outputs.VERSION_BUMP == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Nightly
          release_name: Nightly
          body: Nightly build
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Old Nightly Assets
        if: steps.version_check.outputs.VERSION_BUMP == 'false'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly
          fail-if-no-assets: false
          assets: '*'

      - name: Upload Nightly Release Assets
        if: steps.version_check.outputs.VERSION_BUMP == 'false'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _artifacts/**/*.*
          tag: Nightly
          file_glob: true
